
######################################################################
# ※ 여기의 코드들은 기존 패키지의 코드를 수정한 것이므로 경로 따라가서 덮쓰하면 됨!
######################################################################

# 1. const 파일 수정
# 2. h2b 파일 수정
# 3. text 파일 수정





##### const 파일 수정 #####

# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from __future__ import division

################################################################################
# Hangul Unicode Variables
################################################################################

# Code = 0xAC00 + (Chosung_index * NUM_JOONG * NUM_JONG) + (Joongsung_index * NUM_JONG) + (Jongsung_index)

CHO = (
    u'ㄱ', u'ㄲ', u'ㄴ', u'ㄷ', u'ㄸ', u'ㄹ', u'ㅁ', u'ㅂ', u'ㅃ', u'ㅅ',
    u'ㅆ', u'ㅇ', u'ㅈ', u'ㅉ', u'ㅊ', u'ㅋ', u'ㅌ', u'ㅍ', u'ㅎ'
)

JOONG = (
    u'ㅏ', u'ㅐ', u'ㅑ', u'ㅒ', u'ㅓ', u'ㅔ', u'ㅕ', u'ㅖ', u'ㅗ', u'ㅘ',
    u'ㅙ', u'ㅚ', u'ㅛ', u'ㅜ', u'ㅝ', u'ㅞ', u'ㅟ', u'ㅠ', u'ㅡ', u'ㅢ', u'ㅣ'
)

JONG = (
    u'', u'ㄱ', u'ㄲ', u'ㄳ', u'ㄴ', u'ㄵ', u'ㄶ', u'ㄷ', u'ㄹ', u'ㄺ',
    u'ㄻ', u'ㄼ', u'ㄽ', u'ㄾ', u'ㄿ', u'ㅀ', u'ㅁ', u'ㅂ', u'ㅄ', u'ㅅ',
    u'ㅆ', u'ㅇ', u'ㅈ', u'ㅊ', u'ㅋ', u'ㅌ', u'ㅍ', u'ㅎ'
)

PUNC = (
    u' ', u'.', u',', u'-', u':', u'+', u'?', u'(', u')', u'"', u'=', u'!', u'_', u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9', u'0'
)
JAMO = CHO + JOONG + JONG[1:]

NUM_CHO = 19
NUM_JOONG = 21
NUM_JONG = 28

FIRST_HANGUL_UNICODE = 0xAC00  # '가'
LAST_HANGUL_UNICODE = 0xD7A3  # '힣'


############################################################

##### h2b 파일 수정 #####

import hgtk

MATCH_H2B_CHO = {
    u'ㄱ': [[0,0,0,1,0,0]],
    u'ㄴ': [[1,0,0,1,0,0]],
    u'ㄷ': [[0,1,0,1,0,0]],
    u'ㄹ': [[0,0,0,0,1,0]],
    u'ㅁ': [[1,0,0,0,1,0]],
    u'ㅂ': [[0,0,0,1,1,0]],
    u'ㅅ': [[0,0,0,0,0,1]],
    u'ㅇ': [[1,1,0,1,1,0]],
    u'ㅈ': [[0,0,0,1,0,1]],
    u'ㅊ': [[0,0,0,0,1,1]],
    u'ㅋ': [[1,1,0,1,0,0]],
    u'ㅌ': [[1,1,0,0,1,0]],
    u'ㅍ': [[1,0,0,1,1,0]],
    u'ㅎ': [[0,1,0,1,1,0]],

    u'ㄲ': [[0,0,0,0,0,1], [0,0,0,1,0,0]],
    u'ㄸ': [[0,0,0,0,0,1], [0,1,0,1,0,0]],
    u'ㅃ': [[0,0,0,0,0,1], [0,0,0,1,1,0]],
    u'ㅆ': [[0,0,0,0,0,1], [0,0,0,0,0,1]],
    u'ㅉ': [[0,0,0,0,0,1], [0,0,0,1,0,1]],
}

MATCH_H2B_JOONG = {
    u'ㅏ': [[1,1,0,0,0,1]],
    u'ㅑ': [[0,0,1,1,1,0]],
    u'ㅓ': [[0,1,1,1,0,0]],
    u'ㅕ': [[1,0,0,0,1,1]],
    u'ㅗ': [[1,0,1,0,0,1]],
    u'ㅛ': [[0,0,1,1,0,1]],
    u'ㅜ': [[1,0,1,1,0,0]],
    u'ㅠ': [[1,0,0,1,0,1]],
    u'ㅡ': [[0,1,0,1,0,1]],
    u'ㅣ': [[1,0,1,0,1,0]],
    u'ㅐ': [[1,1,1,0,1,0]],
    u'ㅔ': [[1,0,1,1,1,0]],
    u'ㅒ': [[0,0,1,1,1,0], [1,1,1,0,1,0]],
    u'ㅖ': [[0,0,1,1,0,0]],
    u'ㅘ': [[1,1,1,0,0,1]],
    u'ㅙ': [[1,1,1,0,0,1], [1,1,1,0,1,0]],
    u'ㅚ': [[1,0,1,1,1,1]],
    u'ㅝ': [[1,1,1,1,0,0]],
    u'ㅞ': [[1,1,1,1,0,0], [1,1,1,0,1,0]],
    u'ㅟ': [[1,0,1,1,0,0], [1,1,1,0,1,0]],
    u'ㅢ': [[0,1,0,1,1,1]],
}

MATCH_H2B_JONG = {
    u'ㄱ': [[1,0,0,0,0,0]],
    u'ㄴ': [[0,1,0,0,1,0]],
    u'ㄷ': [[0,0,1,0,1,0]],
    u'ㄹ': [[0,1,0,0,0,0]],
    u'ㅁ': [[0,1,0,0,0,1]],
    u'ㅂ': [[1,1,0,0,0,0]],
    u'ㅅ': [[0,0,1,0,0,0]],
    u'ㅇ': [[0,1,1,0,1,1]],
    u'ㅈ': [[1,0,1,0,0,0]],
    u'ㅊ': [[0,1,1,0,0,0]],
    u'ㅋ': [[0,1,1,0,1,0]],
    u'ㅌ': [[0,1,1,0,0,1]],
    u'ㅍ': [[0,1,0,0,1,1]],
    u'ㅎ': [[0,0,1,0,1,1]],

    u'ㄲ': [[1,0,0,0,0,0], [1,0,0,0,0,0]],
    u'ㄳ': [[1,0,0,0,0,0], [0,0,1,0,0,0]],
    u'ㄵ': [[0,1,0,0,1,0], [1,0,1,0,0,0]],
    u'ㄶ': [[0,1,0,0,1,0], [0,0,1,0,1,1]],
    u'ㄺ': [[0,1,0,0,0,0], [1,0,0,0,0,0]],
    u'ㄻ': [[0,1,0,0,0,0], [0,1,0,0,0,1]],
    u'ㄼ': [[0,1,0,0,0,0], [1,1,0,0,0,0]],
    u'ㄽ': [[0,1,0,0,0,0], [0,0,1,0,0,0]],
    u'ㄾ': [[0,1,0,0,0,0], [0,1,1,0,0,1]],
    u'ㄿ': [[0,1,0,0,0,0], [0,1,0,0,1,1]],
    u'ㅀ': [[0,1,0,0,0,0], [0,0,1,0,1,1]],
    u'ㅄ': [[1,1,0,0,0,0], [0,0,1,0,0,0]],
    u'ㅆ': [[0,0,1,1,0,0]],
}

MATCH_H2B_ALPHABET = {
    'a': [[1,0,0,0,0,0]],
    'b': [[1,1,0,0,0,0]],
    'c': [[1,0,0,1,0,0]],
    'd': [[1,0,0,1,1,0]],
    'e': [[1,0,0,0,1,0]],
    'f': [[1,1,0,1,0,0]],
    'g': [[1,1,0,1,1,0]],
    'h': [[1,1,0,0,1,0]],
    'i': [[0,1,0,1,0,0]],
    'j': [[0,1,0,1,1,0]],
    'k': [[1,0,1,0,0,0]],
    'l': [[1,1,1,0,0,0]],
    'm': [[1,0,1,1,0,0]],
    'n': [[1,0,1,1,1,0]],
    'o': [[1,0,1,0,1,0]],
    'p': [[1,1,1,1,0,0]],
    'q': [[1,1,1,1,1,0]],
    'r': [[1,1,1,0,1,0]],
    's': [[0,1,1,1,0,0]],
    't': [[0,1,1,1,1,0]],
    'u': [[1,0,1,0,0,1]],
    'v': [[1,1,1,0,0,1]],
    'w': [[0,1,1,1,1,1]],
    'x': [[1,0,1,1,0,1]],
    'y': [[1,0,1,1,1,1]],
    'z': [[1,0,1,0,1,1]],

    'A': [[0,0,0,0,0,1], [1,0,0,0,0,0]],
    'B': [[0,0,0,0,0,1], [1,1,0,0,0,0]],
    'C': [[0,0,0,0,0,1], [1,0,0,1,0,0]],
    'D': [[0,0,0,0,0,1], [1,0,0,1,1,0]],
    'E': [[0,0,0,0,0,1], [1,0,0,0,1,0]],
    'F': [[0,0,0,0,0,1], [1,1,0,1,0,0]],
    'G': [[0,0,0,0,0,1], [1,1,0,1,1,0]],
    'H': [[0,0,0,0,0,1], [1,1,0,0,1,0]],
    'I': [[0,0,0,0,0,1], [0,1,0,1,0,0]],
    'J': [[0,0,0,0,0,1], [0,1,0,1,1,0]],
    'K': [[0,0,0,0,0,1], [1,0,1,0,0,0]],
    'L': [[0,0,0,0,0,1], [1,1,1,0,0,0]],
    'M': [[0,0,0,0,0,1], [1,0,1,1,0,0]],
    'N': [[0,0,0,0,0,1], [1,0,1,1,1,0]],
    'O': [[0,0,0,0,0,1], [1,0,1,0,1,0]],
    'P': [[0,0,0,0,0,1], [1,1,1,1,0,0]],
    'Q': [[0,0,0,0,0,1], [1,1,1,1,1,0]],
    'R': [[0,0,0,0,0,1], [1,1,1,0,1,0]],
    'S': [[0,0,0,0,0,1], [0,1,1,1,0,0]],
    'T': [[0,0,0,0,0,1], [0,1,1,1,1,0]],
    'U': [[0,0,0,0,0,1], [1,0,1,0,0,1]],
    'V': [[0,0,0,0,0,1], [1,1,1,0,0,1]],
    'W': [[0,0,0,0,0,1], [0,1,1,1,1,1]],
    'X': [[0,0,0,0,0,1], [1,0,1,1,0,1]],
    'Y': [[0,0,0,0,0,1], [1,0,1,1,1,1]],
    'Z': [[0,0,0,0,0,1], [1,0,1,0,1,1]],

    # '1': [[0,0,1,1,1,1], [1,0,0,0,0,0]],
    # '2': [[0,0,1,1,1,1], [1,1,0,0,0,0]],
    # '3': [[0,0,1,1,1,1], [1,0,0,1,0,0]],
    # '4': [[0,0,1,1,1,1], [1,0,0,1,1,0]],
    # '5': [[0,0,1,1,1,1], [1,0,0,0,1,0]],
    # '6': [[0,0,1,1,1,1], [1,1,0,1,0,0]],
    # '7': [[0,0,1,1,1,1], [1,1,0,1,1,0]],
    # '8': [[0,0,1,1,1,1], [1,1,0,0,1,0]],
    # '9': [[0,0,1,1,1,1], [0,1,0,1,0,0]],
    # '0': [[0,0,1,1,1,1], [0,1,0,1,1,0]],

    ',': [[0,1,0,0,0,0]],
    '.': [[0,1,0,0,1,1]],
    '-': [[0,1,0,0,1,0]],
    '?': [[0,1,1,0,0,1]],
    '_': [[0,0,1,0,0,1]],
    '!': [[0,1,1,0,1,0]],
    '…': [[0,0,0,0,0,1], [0,0,0,0,0,1], [0,0,0,0,0,1]],
    ':': [[0,0,0,0,1,0], [0,1,0,0,0,0]],
    ';': [[0,0,0,0,1,1], [0,1,1,0,0,0]]

}

MATCH_B2H_KO = {
    '[[0,0,0,0,0,0]]':' ',

    '[[0,0,0,1,0,0]]':'ㄱ',
    '[[1,0,0,1,0,0]]':'ㄴ',
    '[[0,1,0,1,0,0]]':'ㄷ',
    '[[0,0,0,0,1,0]]':'ㄹ',
    '[[1,0,0,0,1,0]]':'ㅁ',
    '[[0,0,0,1,1,0]]':'ㅂ',
    '[[0,0,0,0,0,1]]':'ㅅ',
    '[[1,1,0,1,1,0]]':'ㅇ',
    '[[0,0,0,1,0,1]]':'ㅈ',
    '[[0,0,0,0,1,1]]':'ㅊ',
    '[[1,1,0,1,0,0]]':'ㅋ',
    '[[1,1,0,0,1,0]]':'ㅌ',
    '[[1,0,0,1,1,0]]':'ㅍ',
    '[[0,1,0,1,1,0]]':'ㅎ',

    '[[0,0,0,0,0,1],[0,0,0,1,0,0]]':'ㄲ',
    '[[0,0,0,0,0,1],[0,1,0,1,0,0]]':'ㄸ',
    '[[0,0,0,0,0,1],[0,0,0,1,1,0]]':'ㅃ',
    '[[0,0,0,0,0,1],[0,0,0,0,0,1]]':'ㅆ',
    '[[0,0,0,0,0,1],[0,0,0,1,0,1]]':'ㅉ',



    '[[1,1,0,0,0,1]]':'ㅏ',
    '[[0,0,1,1,1,0]]':'ㅑ',
    '[[0,1,1,1,0,0]]':'ㅓ',
    '[[1,0,0,0,1,1]]':'ㅕ',
    '[[1,0,1,0,0,1]]':'ㅗ',
    '[[0,0,1,1,0,1]]':'ㅛ',
    '[[1,0,1,1,0,0]]':'ㅜ',
    '[[1,0,0,1,0,1]]':'ㅠ',
    '[[0,1,0,1,0,1]]':'ㅡ',
    '[[1,0,1,0,1,0]]':'ㅣ',
    '[[1,1,1,0,1,0]]':'ㅐ',
    '[[1,0,1,1,1,0]]':'ㅔ',
    '[[0,0,1,1,1,0],[1,1,1,0,1,0]]':'ㅒ',
    '[[0,0,1,1,0,0]]':'ㅖ',
    '[[1,1,1,0,0,1]]':'ㅘ',
    '[[1,1,1,0,0,1],[1,1,1,0,1,0]]':'ㅙ',
    '[[1,0,1,1,1,1]]':'ㅚ',
    '[[1,1,1,1,0,0]]':'ㅝ',
    '[[1,1,1,1,0,0],[1,1,1,0,1,0]]':'ㅞ',
    '[[1,0,1,1,0,0],[1,1,1,0,1,0]]':'ㅟ',
    '[[0,1,0,1,1,1]]':'ㅢ',



    '[[1,0,0,0,0,0]]':'ㄱ',
    '[[0,1,0,0,1,0]]':'ㄴ',
    '[[0,0,1,0,1,0]]':'ㄷ',
    '[[0,1,0,0,0,0]]':'ㄹ',
    '[[0,1,0,0,0,1]]':'ㅁ',
    '[[1,1,0,0,0,0]]':'ㅂ',
    '[[0,0,1,0,0,0]]':'ㅅ',
    '[[0,1,1,0,1,1]]':'ㅇ',
    '[[1,0,1,0,0,0]]':'ㅈ',
    '[[0,1,1,0,0,0]]':'ㅊ',
    '[[0,1,1,0,1,0]]':'ㅋ',
    '[[0,1,1,0,0,1]]':'ㅌ',
    '[[0,1,0,0,1,1]]':'ㅍ',
    '[[0,0,1,0,1,1]]':'ㅎ',

    '[[1,0,0,0,0,0],[1,0,0,0,0,0]]':'ㄲ',
    '[[1,0,0,0,0,0],[0,0,1,0,0,0]]':'ㄳ',
    '[[0,1,0,0,1,0],[1,0,1,0,0,0]]':'ㄵ',
    '[[0,1,0,0,1,0],[0,0,1,0,1,1]]':'ㄶ',
    '[[0,1,0,0,0,0],[1,0,0,0,0,0]]':'ㄺ',
    '[[0,1,0,0,0,0],[0,1,0,0,0,1]]':'ㄻ',
    '[[0,1,0,0,0,0],[1,1,0,0,0,0]]':'ㄼ',
    '[[0,1,0,0,0,0],[0,0,1,0,0,0]]':'ㄽ',
    '[[0,1,0,0,0,0],[0,1,1,0,0,1]]':'ㄾ',
    '[[0,1,0,0,0,0],[0,1,0,0,1,1]]':'ㄿ',
    '[[0,1,0,0,0,0],[0,0,1,0,1,1]]':'ㅀ',
    '[[1,1,0,0,0,0],[0,0,1,0,0,0]]':'ㅄ',
    '[[0,0,1,1,0,0]]':'ㅆ',

    #'[[0,1,0,0,0,0]]':',',
    '[[0,1,0,0,1,1]]':'.',
    #'[[0,1,0,0,1,0]]':'-',
    '[[0,1,1,0,0,1]]':'?',
    '[[0,0,1,0,0,1]]':'_',
    '[[0,1,1,0,1,0]]':'!',
    '[[0,0,0,0,0,1],[0,0,0,0,0,1],[0,0,0,0,0,1]]':'……',
    '[[0,0,0,0,1,0],[0,1,0,0,0,0]]':':',
    '[[0,0,0,0,1,1],[0,1,1,0,0,0]]':';'
}

MATCH_H2B_MIN = {
    u'억':[1,0,0,1,1,1],
    u'언':[0,1,1,1,1,1],
    u'얼':[0,1,1,1,1,0],
    u'연':[1,0,0,0,0,1],
    u'열':[1,1,0,0,1,1],
    u'영':[1,1,0,1,1,1],
    u'옥':[1,0,1,1,0,1],
    u'온':[1,1,1,0,1,1],
    u'옹':[1,1,1,1,1,1],
    u'운':[1,1,0,1,1,0],
    u'울':[1,1,1,1,0,1],
    u'은':[1,0,1,0,1,1],
    u'을':[0,1,1,1,0,1],
    u'인':[1,1,1,1,1,0],
}

MATCH_H2B_PUNC = {
    '1':[[1,0,0,0,0,0]],
    '2':[[1,1,0,0,0,0]],
    '3':[[1,0,0,1,0,0]],
    '4':[[1,0,0,1,1,0]],
    '5':[[1,0,0,0,1,0]],
    '6':[[1,1,0,1,0,0]],
    '7':[[1,1,0,1,1,0]],
    '8':[[1,1,0,0,1,0]],
    '9':[[0,1,0,1,0,0]],
    '0':[[0,1,0,1,1,0]],

    '"':[[0,0,0,0,0,1],[0,1,1,0,0,1]],
    '<':[[0,0,0,0,1,0],[0,1,1,0,0,1]],
    '《':[[0,0,0,0,1,1],[0,1,1,0,0,1]],
    '[':[[0,1,1,0,0,1],[0,1,1,0,0,0]],  #[
    '(':[[0,1,1,0,0,1],[0,0,1,0,0,0]],
    '"':[[0,1,1,0,0,1]],
    '"':[[0,0,1,0,1,1],[0,0,1,0,0,0]],
    '>':[[0,0,1,0,1,1],[0,1,0,0,0,0]],
    '》':[[0,0,1,0,1,1],[0,1,1,0,0,0]],
    "]":[[0,0,0,0,1,1],[0,0,1,0,1,1]],  #]
    ')':[[0,0,0,0,0,1],[0,0,1,0,1,1]],
    '"':[[0,0,1,0,1,1]],
    ' ':[[0,0,0,0,0,0]],
    '.':[[0,1,0,0,1,1]],
    '-':[[0,1,0,0,1,0]],
    '_':[[0,0,1,0,0,1]],
    '?':[[0,1,1,0,0,1]],
    '!':[[0,1,1,0,1,0]],
    '……':[[0,0,0,0,0,1],[0,0,0,0,0,1],[0,0,0,0,0,1]],
    ':':[[0,0,0,0,1,0],[0,1,0,0,0,0]],
    ';':[[0,0,0,0,1,1],[0,1,1,0,0,0]],
    ',':[[0,0,0,0,1,0],[0,0,0,0,0,0]],
    '/':[[0,0,0,1,1,1],[0,0,1,1,0,0]]
}
# MATCH_B2H_EN = {
# }


def letter(hangul_letter):
    """
    Convert a hangul letter to 6-dot braille
    (alphabet, number, and some special chracter supported)

    :param str hangul: a hangul chracter to convert to braille
    :return: braille data (6-int list with the value 0 or 1)
    :rtype: list[str, list[int]]
    """
    result = []
    hangul_decomposed = hgtk.text.decompose(hangul_letter[0])
    hangul_decomposed = \
        hangul_decomposed.replace(hgtk.text.DEFAULT_COMPOSE_CODE, '')
    min, cho, joong, jong, jong2 = '','','','',''
    for i in range(len(hangul_decomposed)):
        hangul = hangul_decomposed[i]
        if i == 0 and hangul in MATCH_H2B_CHO:
            cho = [hangul, MATCH_H2B_CHO[hangul]]
            # result.append([hangul, MATCH_H2B_CHO[hangul]])
        if i == 0 and hangul in MATCH_H2B_ALPHABET:
            pass
            # result.append([hangul, MATCH_H2B_ALPHABET[hangul]])
        if i == 0 and hangul in MATCH_H2B_JOONG:
            cho = ['ㅇ',[1,1,0,1,1,0]]
            joong = [hangul, MATCH_H2B_JOONG[hangul]]
        if i == 1 and hangul in MATCH_H2B_JOONG:
            joong = [hangul, MATCH_H2B_JOONG[hangul]]
            # result.append([hangul, MATCH_H2B_JOONG[hangul]])
        if i == 2 and hangul in MATCH_H2B_JONG:
            # if jong != '':
            #     jong2 = [hangul, MATCH_H2B_JONG[hangul]]
            if len(MATCH_H2B_JONG[hangul])==2:
                jong = [MATCH_B2H_KO[str(MATCH_H2B_JONG[hangul][0]).replace(" ","").replace("[","[[").replace("]","]]")],[MATCH_H2B_JONG[hangul][0]]]
                jong2 = [MATCH_B2H_KO[str(MATCH_H2B_JONG[hangul][1]).replace(" ","").replace("[","[[").replace("]","]]")],[MATCH_H2B_JONG[hangul][1]]]
            else:
                jong = [hangul, MATCH_H2B_JONG[hangul]]
            # result.append([hangul, MATCH_H2B_JONG[hangul]])
            # print(cho,joong, jong, jong2)
            min = hgtk.text.compose(['ㅇ',joong[0],jong[0]])
            # print(min)
        if cho=='' and joong =='' and jong =='' and jong2 =='':
            result.append([hangul, MATCH_H2B_PUNC[hangul]])
            continue
    if min in MATCH_H2B_MIN:
        if cho != '' and cho[0] != 'ㅇ':
            result.append(cho)
        result.append(MATCH_H2B_MIN[min])
        cho,joong,jong = '','',''
    else:
        if cho != '' and cho[0] != 'ㅇ':
            result.append(cho)
        if joong != '':
            result.append(joong)
        if jong != '':
            result.append(jong)
    if jong2 != '':
        result.append(jong2)

    if result == []:
        pass
        #result.append([hangul, [[0,0,0,0,0,0]]])
    return result


def text(hangul_sentence):
    """
    Convert hangul sentence to list of 6-dot braille

    :param str hangul: hangul text to convert to braille
    :return: list of braille data (list of 6-int list with the value 0 or 1)
    :rtype: list[str, list[str, list[int]]]
    """
    result = []
    hangul_sentence.replace("것", [[0,0,0,1,1,1],[1,1,0,0,0,1]])
    hangul_sentence.replace("그래서", [[1,0,0,0,0,0],[0,1,1,1,0,0]])
    hangul_sentence.replace("그러나",[[1,0,0,0,0,0],[1,0,0,1,0,0]])
    hangul_sentence.replace("그러면",[[1,0,0,0,0,0],[0,1,0,0,1,0]])
    hangul_sentence.replace("그러므로",[[1,0,0,0,0,0],[0,1,0,0,0,1]])
    hangul_sentence.replace("그런데",[[1,0,0,0,0,0],[1,0,1,1,1,0]])
    hangul_sentence.replace("그리고",[[1,0,0,0,0,0],[1,0,1,0,0,1]])
    hangul_sentence.replace("그리하여",[[1,0,0,0,0,0],[1,0,0,0,1,1]])
    for hangul_letter in hangul_sentence:
        result.append([hangul_letter, letter(hangul_letter)])
    return result

def h2b(hangul_sentence):
    result = []

    for hangul_letter in hangul_sentence:
        result.append([hangul_letter, letter(hangul_letter)])

    d = []
    kex = 'X'
    for i in result:
        for j in i[1:]:
            for k in j:
                try:
                    d.extend(k[1])
                    try:
                        if int(k[0]) in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] and kex == 'X':
                            dpop = d.pop(-1)
                            d.extend([[0, 0, 1, 1, 1, 1]])
                            d.extend([dpop])
                    except:
                        pass
                except:
                    d.append(k)
                try:
                    kex = 'X'
                    if len(k)==2:
                        if k[0] in ['-','_']:
                            kex = 0
                        kex = int(k[0])
                except:
                    pass
    return d


from hgtk.const import JOONG

def b2h(c):
    result = []

    for braille in c:
        a = MATCH_B2H_KO[braille.replace(" ","")]
        if a == 'ㅆ' and b not in JOONG:
            a = 'ㅖ'
        result.append(a)
        b = a


    return result



############################################################

##### text 파일 수정 #####

# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from __future__ import division

from .const import CHO, JOONG, JONG, PUNC
from . import checker
from . import letter

# 코딩 효율과 가독성을 위해서 index대신 unicode사용 by bluedisk
CHO_COMP = {
    u'ㅅ': {
        u'ㄱ':u'ㄲ',
        u'ㄷ':u'ㄸ',
        u'ㅂ':u'ㅃ',
        u'ㅅ':u'ㅆ',
        u'ㅈ':u'ㅉ'
    }
}

JOONG_COMP = {
    u'ㅑ':{
        u'ㅐ':u'ㅒ'
    },
    u'ㅘ':{
        u'ㅐ':u'ㅙ'
    },
    u'ㅝ':{
        u'ㅐ':u'ㅞ'
    },
    u'ㅜ':{
        u'ㅐ':u'ㅟ'
    }
}
JONG_COMP = {
    u'ㄱ': {
        u'ㄱ': u'ㄲ',
        u'ㅅ': u'ㄳ',
    },
    u'ㄴ': {
        u'ㅈ': u'ㄵ',
        u'ㅎ': u'ㄶ',
    },
    u'ㄹ': {
        u'ㄱ': u'ㄺ',
        u'ㅁ': u'ㄻ',
        u'ㅂ': u'ㄼ',
        u'ㅅ': u'ㄽ',
        u'ㅌ': u'ㄾ',
        u'ㅍ': u'ㄿ',
        u'ㅎ': u'ㅀ',
    }
}

DEFAULT_COMPOSE_CODE = u'ᴥ'


################################################################################
# Hangul Automata functions by bluedisk@gmail.com
################################################################################


def decompose(text, latin_filter=True, compose_code=""):
    result=u""

    for c in list(text):
        if checker.is_hangul(c):

            if checker.is_jamo(c):
                result = result + c + compose_code
            else:
                result = result + "".join(letter.decompose(c)) + compose_code

        else:
            if latin_filter:    # 한글 외엔 Latin1 범위까지만 포함 (한글+영어)
                if checker.is_latin1(c):
                    result = result + c
            else:
                result = result + c

    return result


# STATUS_CHO = 0
# STATUS_JOONG = 1
# STATUS_JONG1 = 2
# STATUS_JONG2 = 3


def compose(text):
    res_text = u""

    for i in range(len(text)+4):
        if i == len(text):
            break
        elif i == len(text)-1:
            a = text[i]
            b = " "
            c = " "
            d = " "
            e = " "
        elif i == len(text)-2:
            a = text[i]
            b = text[i + 1]
            c = " "
            d = " "
            e = " "
        elif i == len(text) - 3:
            a = text[i]
            b = text[i + 1]
            c = text[i+2]
            d = " "
            e = " "
        elif i == len(text) - 4:
            a = text[i]
            b = text[i + 1]
            c = text[i + 2]
            d = text[i + 3]
            e = " "
        else:
            a = text[i]
            b = text[i + 1]
            c = text[i + 2]
            d = text[i + 3]
            e = text[i + 4]
        last = ""

        if a in PUNC:
            res_text += a

        if b in JOONG:
            if c not in JONG or d in JOONG:
                last = b
            elif d not in JONG or e in JOONG:
                last = c
            elif c in JONG_COMP and d in JONG_COMP[c]:
                last = d

        if last == b:
            res_text += letter.compose(a, b)
        elif last == c:
            res_text += letter.compose(a, b, c)
        elif last == d:
            res_text += letter.compose(a, b, JONG_COMP[c][d])

    return res_text


def compose2(text):
    res_text = u""

    for i in range(len(text)+4):
        if i == len(text):
            break
        elif i == len(text)-1:
            a = text[i]
            b = " "
            c = " "
            d = " "
            e = " "
        elif i == len(text)-2:
            a = text[i]
            b = text[i + 1]
            c = " "
            d = " "
            e = " "
        elif i == len(text) - 3:
            a = text[i]
            b = text[i + 1]
            c = text[i+2]
            d = " "
            e = " "
        elif i == len(text) - 4:
            a = text[i]
            b = text[i + 1]
            c = text[i + 2]
            d = text[i + 3]
            e = " "
        else:
            a = text[i]
            b = text[i + 1]
            c = text[i + 2]
            d = text[i + 3]
            e = text[i + 4]
        # print(a,b,c,d,e)
        last = ""

        if a in PUNC:
            res_text += a

        if b in JOONG:
            if c not in JONG or d in JOONG:
                last = b
            elif d not in JONG or e in JOONG:
                last = c
            elif c in JONG_COMP and d in JONG_COMP[c]:
                last = d

        if last == b:
            res_text += letter.compose(a, b)
        elif last == c:
            res_text += letter.compose(a, b, c)
        elif last == d:
            res_text += letter.compose(a, b, JONG_COMP[c][d])

    return res_text








